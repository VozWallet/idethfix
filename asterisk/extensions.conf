; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
static=yes
writeprotect=no
clearglobalvars=no

[globals]
CONSOLE=Console/dsp				; Console interface for demo
IAXINFO=guest					; IAXtel username/password
TRUNK=DAHDI/G2					; Trunk interface
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)

[demo]
; include => stdexten
include => outboundmsg1
include => outboundmsg2
include => msgack
include => record-outboundmsgs

;include => google-asr
;
; We start with what to do when a call first comes in.
;
exten => s,1,Wait(1)			; Wait a second, just for fun
exten => s,n,Answer()			; Answer the line
exten => s,n,Set(TIMEOUT(digit)=5)	; Set Digit Timeout to 5 seconds
exten => s,n,Set(TIMEOUT(response)=10)	; Set Response Timeout to 10 seconds
exten => s,n(restart),BackGround(demo-congrats)	; Play a congratulatory message
exten => s,n(instruct),BackGround(demo-instruct)	; Play some instructions
exten => s,n,WaitExten()		; Wait for an extension to be dialed.

exten => 2,1,BackGround(demo-moreinfo)	; Give some more information.
exten => 2,n,Goto(s,instruct)

exten => 3,1,Set(CHANNEL(language)=fr)		; Set language to french
exten => 3,n,Goto(s,restart)		; Start with the congratulations

; Payments and requests
exten => 666,1,Answer(); 
same => n,Wait(2)
same => n(replay),agi(googletts.agi, "Hello", en); 
same => n(replay),agi(googletts.agi, "if you want to make a payment say payment or say request to claim one", en); 
same => n,agi(speech-recog.agi,en,2,#,"",-1,[payment,request]);
same => n,Verbose(1,You said: ${utterance}); 
same => n,Verbose(1,The probability to be correct: ${confidence});
same => n,Verbose(1,The numbers of characters is: ${LEN(${utterance})});
same => n,GotoIf($["${utterance}" == "payment"]?payment:continue)
same => n(continue),GotoIf($["${utterance}" == "request"]?request:replay)
same => n,Verbose(1,You said: ${utterance}); 

same => n(payment),agi(googletts.agi,"Please, say your username",en)
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,Set(user=${utterance})
same => n,Verbose(1,You said: ${user}); 

same => n,agi(googletts.agi,"Please, say the to username to sent funds",en)
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,Set(to_user=${utterance})
same => n,Verbose(1,You said: ${to_user}); 


same => n,agi(googletts.agi,"Please, say the amount to send",en)
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,Set(amount=${utterance})
same => n,Verbose(1,You said: ${amount}); 

same => n(start_666),agi(googletts.agi,"We need your passphrase",en)
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,Verbose(1,You said: ${utterance}); 
same => n,Verbose(1,The probability to be correct: ${confidence});
same => n,Verbose(1,The numbers of characters is: ${LEN(${utterance})});
same => n(start_666),agi(googletts.agi,"Validating your fingerprint...",en)
same => n(start_666),agi(googletts.agi,"Using neuronal networks to autenticate you",en)
same => n,agi(googletts.agi, "${user} wants to send to ${to_user} ${amount} giga wei",en); 
same => n,Set(passphrase=${utterance})
same => n(askyes),agi(googletts.agi, "Please say YES if it's correct", en); 
same => n,agi(speech-recog.agi,en,2,#,"",-1,[yes,no]);
same => n,GotoIf($["${utterance}" == "yes"]?passphrase:payment)
same => n(passphrase),System(cd /usr/src/keyman && nodejs index_v2.js send '${user}' '${passphrase}' '${to_user}' '${amount}' );
same => n,agi(googletts.agi, "The payment has just broacasted, thank you ${user} for using Idefix. Wof Wof!", en); 
same => n,Hangup();

; Create account 
exten => 111,1,Answer();
same => n,Wait(2)
same => n,agi(googletts.agi,"Welcome to Idefix, your voice wallet!",en)
same => n,agi(googletts.agi,"Please, choose your username",en)
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,agi(googletts.agi, "Welcome ${utterance}",en); 
same => n,Set(user=${utterance})
same => n(start),agi(googletts.agi,"We need two words to generate your voice wallet key",en)
same => n(replay1),agi(googletts.agi, "Please say both words",en); 
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,Verbose(1,You said: ${utterance}); 
same => n,Verbose(1,The probability to be correct: ${confidence});
same => n,Verbose(1,The numbers of characters is: ${LEN(${utterance})});
same => n,agi(googletts.agi, "Your passwords are ${utterance}",en); 
same => n,Set(temp=${utterance})
same => n(askyes),agi(googletts.agi, "Please say YES if it's correct", en); 
same => n,agi(speech-recog.agi,en,2,#,"",-1,[yes,no]);
same => n,GotoIf($["${utterance}" == "yes"]?save2:replay1)
same => n(save1),Set(firstword=${temp})
same => n(replay2),agi(googletts.agi, "Please say the second word",en); 
same => n,agi(speech-recog.agi,en,2,#,"",-1,[]);
same => n,Verbose(1,You said: ${utterance}); 
same => n,Verbose(1,The probability to be correct: ${confidence});
same => n,Verbose(1,The numbers of characters is: ${LEN(${utterance})});
same => n,agi(googletts.agi, "You said: ${utterance}",en); 
same => n,Set(temp=${utterance})
same => n(askyes2),agi(googletts.agi, "Please say YES if it's correct", en); 
same => n,agi(speech-recog.agi,en,2,#,"",-1,[yes,no]);
same => n,GotoIf($["${utterance}" == "yes"]?save2:replay2)
same => n(save2),Set(secondword=${temp})
same => n,agi(googletts.agi, "The words are: ${temp}",en); 
same => n,System(cd /usr/src/keyman && nodejs index_v2.js create '${user}' '${temp}');
same => n,System(touch /usr/src/keyman/wallets/${CALLERID(num)}_${user});
same => n,agi(googletts.agi, "Your voice wallet account has been created, thank you ${user} for using Idefix. Wof Wof!",en); 
same => n(bye),Hangup();

exten => 1000,1,Goto(default,s,1)
;
; We also create an example user, 1234, who is on the console and has
; voicemail, etc.
;
exten => 1234,1,Playback(transfer,skip)		; "Please hold while..."
					; (but skip if channel is not up)
exten => 1234,n,Gosub(${EXTEN},stdexten(${GLOBAL(CONSOLE)}))
exten => 1234,n,Goto(default,s,1)		; exited Voicemail

exten => 1235,1,VoiceMail(1234,u)		; Right to voicemail

exten => 1236,1,Dial(Console/dsp)		; Ring forever
exten => 1236,n,VoiceMail(1234,b)		; Unless busy

;
; # for when they're done with the demo
;
exten => #,1,Playback(demo-thanks)	; "Thanks for trying the demo"
exten => #,n,Hangup()			; Hang them up.

;
; A timeout and "invalid extension rule"
;
exten => t,1,Goto(#,1)			; If they take too long, give up
exten => i,1,Playback(invalid)		; "That's not valid, try again"

;
; Create an extension, 500, for dialing the
; Asterisk demo.
;
exten => 500,1,Playback(demo-abouttotry)	; Let them know what's going on
exten => 500,n,Dial(IAX2/guest@pbx.digium.com/s@default)	; Call the Asterisk demo
exten => 500,n,Playback(demo-nogo)	; Couldn't connect to the demo site
exten => 500,n,Goto(s,6)		; Return to the start over message.

;
; Create an extension, 600, for evaluating echo latency.
;
exten => 600,1,Playback(demo-echotest)	; Let them know what's going on
exten => 600,n,agi(speech-recog.agi,es,2,#); utilizamos el Script de Zaf, idioma español, 2 segundos de timeout , y # tecla de interrupción/finalización.
exten => 600,n,Echo()			; Do the echo test
exten => 600,n,Playback(demo-echodone)	; Let them know it's over
exten => 600,n,Goto(s,6)		; Start over


; For more information on applications, just type "core show applications" at your
; friendly Asterisk CLI prompt.
;
; "core show application <command>" will show details of how you
; use that particular application in this file, the dial plan.
; "core show functions" will list all dialplan functions
; "core show function <COMMAND>" will show you more information about
; one function. Remember that function names are UPPER CASE.

[outboundmsg1]
exten => s,1,Set(TIMEOUT(digit)=5)             ; Set Digit Timeout to 5 seconds
exten => s,2,Set(TIMEOUT(response)=10)         ; Set Response Timeout to 10 seconds
same => n,Wait(3)
same => n,agi(googletts.agi,"Congratulations! You have recived a new payment!",en)
same => n,agi(googletts.agi, "Thank you for using Idefix. Wof Wof!",en); 

;exten => s,3,Answer
;exten => s,4,Wait(1)
;exten => s,5,Background(outboundmsgs/msg1)         ; "play outbound msg"
;exten => s,6,Background(outboundmsgs/how_to_ack)   ; "Press 1 to replay or 2 to acknowledge receiving this message"
;exten => 1,1,Goto(s,5)   ; replay message
;exten => 2,1,Goto(msgack,s,1) ; acknowledge message
;exten => t,1,Playback(vm-goodbye)
exten => t,2,Hangup
; at this point we could do something like reschedule the call to try again later
; or send an email saying the msg was not received,
; or ...


[outboundmsg2]
exten => s,1,Set(TIMEOUT(digit)=5)             ; Set Digit Timeout to 5 seconds
exten => s,2,Set(TIMEOUT(response)=10)         ; Set Response Timeout to 10 seconds
exten => s,3,Answer
exten => s,4,Wait(1)
exten => s,5,Background(outboundmsgs/msg2)         ; "play outbound msg"
exten => s,6,Background(outboundmsgs/how_to_ack)   ; "Press 1 to replay or 2 to acknowledge receiving this message"
exten => 1,1,Goto(s,5)   ; replay message
exten => 2,1,Goto(msgack,s,1) ; acknowledge message
exten => t,1,Playback(vm-goodbye)
exten => t,2,Hangup
; at this point we could do something like reschedule the call to try again later
; or send an email saying the msg was not received,
; or ...


[msgack]
exten => s,1,Playback(outboundmsgs/thankyou)
exten => s,2,Playback(vm-goodbye)
exten => s,3,Hangup
; at this point we might want to log the message acknowledgement somewhere
; and perhaps trigger some additional processing


[record-outboundmsgs]
; Record voice files
;
; Before using this the first time
;    mkdir /var/lib/asterisk/sounds/outboundmsgs
;    chown asterisk_user:asterisk_user /var/lib/asterisk/sounds/outboundmsgs
;    (Where asterisk_user = the user that asterisk runs under: = root for many installations)
;
; In a context for incoming calls put something like
;  include => record-outboundmsgs
;
; Then call
;   2051 to Record a new outbound msg1
;   2052 to Record a new outbound msg2
;
;   2061 to Record the msg played when the recipient acks the message
;   2062 to Record the "How to ACK message"
;
; After dialing one of the extensions above:
;   Wait for the record start tone
;   Record your message
;   Press # to stop recording
;   Listen to an automatic playback of your new message
;
; outbound msg1
exten => 2051,1,Wait(2)
exten => 2051,2,Record(outboundmsgs/msg1:gsm)
exten => 2051,3,Wait(2)
exten => 2051,4,Playback(outboundmsgs/msg1)
exten => 2051,5,wait(2)
exten => 2051,6,Hangup
;
; outbound msg2
exten => 2052,1,Wait(2)
exten => 2052,2,Record(outboundmsgs/msg2:gsm)
exten => 2052,3,Wait(2)
exten => 2052,4,Playback(outboundmsgs/msg2)
exten => 2052,5,wait(2)
exten => 2052,6,Hangup
;
;
; Msg played when msg is acked
exten => 2061,1,Wait(2)
exten => 2061,2,Record(outboundmsgs/thankyou:gsm)
exten => 2061,3,Wait(2)
exten => 2061,4,Playback(outboundmsgs/thankyou)
exten => 2061,5,wait(2)
exten => 2061,6,Hangup
;
; Msg played after outbound msg: "Press 1 to replay or 2 to acknowledge receiving this message"
exten => 2062,1,Wait(2)
exten => 2062,2,Record(outboundmsgs/how_to_ack:gsm)
exten => 2062,3,Wait(2)
exten => 2062,4,Playback(outboundmsgs/how_to_ack)
exten => 2062,5,wait(2)
exten => 2062,6,Hangup

